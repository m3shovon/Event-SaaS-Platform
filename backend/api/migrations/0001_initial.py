# Generated by Django 4.2.7 on 2025-08-03 08:03

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('business_name', models.CharField(max_length=200)),
                ('business_type', models.CharField(choices=[('wedding_planner', 'Wedding Planner'), ('event_management', 'Event Management Company'), ('community_org', 'Community Organization'), ('corporate_planner', 'Corporate Event Planner'), ('individual', 'Individual Planner'), ('other', 'Other')], max_length=50)),
                ('country', models.CharField(default='Bangladesh', max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('subscription_plan', models.CharField(choices=[('free', 'Free'), ('basic', 'Basic'), ('pro', 'Pro'), ('enterprise', 'Enterprise')], default='free', max_length=20)),
                ('is_verified', models.BooleanField(default=False)),
                ('subscribe_newsletter', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('category', models.CharField(choices=[('wedding', 'Wedding'), ('corporate', 'Corporate Event'), ('community', 'Community Event'), ('social', 'Social Event'), ('birthday', 'Birthday Party'), ('anniversary', 'Anniversary'), ('conference', 'Conference'), ('seminar', 'Seminar'), ('other', 'Other')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('venue', models.CharField(max_length=200)),
                ('address', models.TextField(blank=True)),
                ('budget', models.DecimalField(decimal_places=2, max_digits=12)),
                ('expected_guests', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('planning', 'Planning'), ('confirmed', 'Confirmed'), ('active', 'Active'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planning', max_length=20)),
                ('special_requirements', models.TextField(blank=True)),
                ('contact_person', models.CharField(blank=True, max_length=100)),
                ('contact_phone', models.CharField(blank=True, max_length=20)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('category', models.CharField(choices=[('catering', 'Catering'), ('photography', 'Photography'), ('decoration', 'Decoration'), ('entertainment', 'Entertainment'), ('venue', 'Venue'), ('transportation', 'Transportation'), ('flowers', 'Flowers'), ('makeup', 'Makeup & Beauty'), ('sound', 'Sound & Lighting'), ('security', 'Security'), ('other', 'Other')], max_length=50)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone', models.CharField(max_length=20)),
                ('address', models.TextField()),
                ('website', models.URLField(blank=True)),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('price_range', models.CharField(choices=[('budget', 'Budget (৳)'), ('mid_range', 'Mid Range (৳৳)'), ('premium', 'Premium (৳৳৳)'), ('luxury', 'Luxury (৳৳৳৳)')], max_length=20)),
                ('services', models.TextField()),
                ('notes', models.TextField(blank=True)),
                ('is_preferred', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vendors', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Guest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('category', models.CharField(choices=[('family', 'Family'), ('friends', 'Friends'), ('colleagues', 'Colleagues'), ('vip', 'VIP'), ('vendors', 'Vendors'), ('other', 'Other')], max_length=50)),
                ('rsvp_status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('declined', 'Declined'), ('maybe', 'Maybe')], default='pending', max_length=20)),
                ('plus_ones', models.PositiveIntegerField(default=0)),
                ('dietary_restrictions', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('invitation_sent', models.BooleanField(default=False)),
                ('invitation_sent_date', models.DateTimeField(blank=True, null=True)),
                ('checked_in', models.BooleanField(default=False)),
                ('check_in_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='guests', to='api.event')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BudgetItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('venue', 'Venue'), ('catering', 'Catering'), ('decoration', 'Decoration'), ('photography', 'Photography'), ('entertainment', 'Entertainment'), ('transportation', 'Transportation'), ('flowers', 'Flowers'), ('invitations', 'Invitations'), ('gifts', 'Gifts'), ('miscellaneous', 'Miscellaneous')], max_length=50)),
                ('item_name', models.CharField(max_length=200)),
                ('estimated_cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('actual_cost', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('vendor', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('partial', 'Partially Paid'), ('overdue', 'Overdue')], default='pending', max_length=20)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='budget_items', to='api.event')),
            ],
            options={
                'ordering': ['due_date', 'category'],
            },
        ),
    ]
